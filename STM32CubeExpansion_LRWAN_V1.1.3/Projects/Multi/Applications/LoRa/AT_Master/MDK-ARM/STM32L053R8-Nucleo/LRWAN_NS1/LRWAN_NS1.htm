<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\LRWAN_NS1\LRWAN_NS1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\LRWAN_NS1\LRWAN_NS1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Sat Dec 23 15:38:58 2017
<BR><P>
<H3>Maximum Stack Usage =        520 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SensorMeasureData &rArr; Lora_GetBatLevel &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">NMI_Handler</a><BR>
 <LI><a href="#[60]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">HardFault_Handler</a><BR>
 <LI><a href="#[61]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">SVC_Handler</a><BR>
 <LI><a href="#[62]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62]">PendSV_Handler</a><BR>
 <LI><a href="#[70]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[70]">ADC1_COMP_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[6d]">DMA1_Channel1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[6e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[6f]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[69]">EXTI0_1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[6a]">EXTI2_3_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[6b]">EXTI4_15_IRQHandler</a> from stm32l0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[67]">FLASH_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[6]">HTS221_H_Check_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_H_Check_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[2]">HTS221_H_DeInit</a> from hts221_driver_hl.o(i.HTS221_H_DeInit) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[d]">HTS221_H_Get_DRDY_Status</a> from hts221_driver_hl.o(i.HTS221_H_Get_DRDY_Status) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[7]">HTS221_H_Get_Hum</a> from hts221_driver_hl.o(i.HTS221_H_Get_Hum) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[8]">HTS221_H_Get_ODR</a> from hts221_driver_hl.o(i.HTS221_H_Get_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[5]">HTS221_H_Get_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_H_Get_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[1]">HTS221_H_Init</a> from hts221_driver_hl.o(i.HTS221_H_Init) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[b]">HTS221_H_Read_Reg</a> from hts221_driver_hl.o(i.HTS221_H_Read_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[4]">HTS221_H_Sensor_Disable</a> from hts221_driver_hl.o(i.HTS221_H_Sensor_Disable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[3]">HTS221_H_Sensor_Enable</a> from hts221_driver_hl.o(i.HTS221_H_Sensor_Enable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[9]">HTS221_H_Set_ODR</a> from hts221_driver_hl.o(i.HTS221_H_Set_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[a]">HTS221_H_Set_ODR_Value</a> from hts221_driver_hl.o(i.HTS221_H_Set_ODR_Value) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[c]">HTS221_H_Write_Reg</a> from hts221_driver_hl.o(i.HTS221_H_Write_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[13]">HTS221_T_Check_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_T_Check_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[f]">HTS221_T_DeInit</a> from hts221_driver_hl.o(i.HTS221_T_DeInit) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[1a]">HTS221_T_Get_DRDY_Status</a> from hts221_driver_hl.o(i.HTS221_T_Get_DRDY_Status) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[15]">HTS221_T_Get_ODR</a> from hts221_driver_hl.o(i.HTS221_T_Get_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[14]">HTS221_T_Get_Temp</a> from hts221_driver_hl.o(i.HTS221_T_Get_Temp) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[12]">HTS221_T_Get_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_T_Get_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[e]">HTS221_T_Init</a> from hts221_driver_hl.o(i.HTS221_T_Init) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[18]">HTS221_T_Read_Reg</a> from hts221_driver_hl.o(i.HTS221_T_Read_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[11]">HTS221_T_Sensor_Disable</a> from hts221_driver_hl.o(i.HTS221_T_Sensor_Disable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[10]">HTS221_T_Sensor_Enable</a> from hts221_driver_hl.o(i.HTS221_T_Sensor_Enable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[16]">HTS221_T_Set_ODR</a> from hts221_driver_hl.o(i.HTS221_T_Set_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[17]">HTS221_T_Set_ODR_Value</a> from hts221_driver_hl.o(i.HTS221_T_Set_ODR_Value) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[19]">HTS221_T_Write_Reg</a> from hts221_driver_hl.o(i.HTS221_T_Write_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[60]">HardFault_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[76]">I2C1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[77]">I2C2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[7d]">LCD_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[3c]">LPS22HB_FIFO_Get_Data</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Data) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[35]">LPS22HB_FIFO_Get_Empty_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Empty_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[38]">LPS22HB_FIFO_Get_Fth_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Fth_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[36]">LPS22HB_FIFO_Get_Full_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Full_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3d]">LPS22HB_FIFO_Get_Mode</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Mode) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3b]">LPS22HB_FIFO_Get_Num_Of_Samples</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Num_Of_Samples) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[37]">LPS22HB_FIFO_Get_Ovr_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Ovr_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3f]">LPS22HB_FIFO_Get_Watermark_Level</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Watermark_Level) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[43]">LPS22HB_FIFO_Reset_Interrupt</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Reset_Interrupt) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[42]">LPS22HB_FIFO_Set_Interrupt</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Interrupt) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3e]">LPS22HB_FIFO_Set_Mode</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Mode) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[40]">LPS22HB_FIFO_Set_Watermark_Level</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Watermark_Level) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[39]">LPS22HB_FIFO_Stop_On_Fth</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Stop_On_Fth) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3a]">LPS22HB_FIFO_Usage</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Usage) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[41]">LPS22HB_FIFO_Watermark_Usage</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Watermark_Usage) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[20]">LPS22HB_P_Check_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Check_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1c]">LPS22HB_P_DeInit</a> from lps22hb_driver_hl.o(i.LPS22HB_P_DeInit) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[27]">LPS22HB_P_Get_DRDY_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_DRDY_Status) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[22]">LPS22HB_P_Get_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[21]">LPS22HB_P_Get_Press</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_Press) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1f]">LPS22HB_P_Get_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1b]">LPS22HB_P_Init</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Init) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[25]">LPS22HB_P_Read_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Read_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1e]">LPS22HB_P_Sensor_Disable</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Disable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1d]">LPS22HB_P_Sensor_Enable</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Enable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[23]">LPS22HB_P_Set_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[24]">LPS22HB_P_Set_ODR_Value</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR_Value) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[26]">LPS22HB_P_Write_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Write_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2d]">LPS22HB_T_Check_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Check_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[29]">LPS22HB_T_DeInit</a> from lps22hb_driver_hl.o(i.LPS22HB_T_DeInit) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[34]">LPS22HB_T_Get_DRDY_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_DRDY_Status) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2f]">LPS22HB_T_Get_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2e]">LPS22HB_T_Get_Temp</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_Temp) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2c]">LPS22HB_T_Get_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[28]">LPS22HB_T_Init</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Init) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[32]">LPS22HB_T_Read_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Read_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2b]">LPS22HB_T_Sensor_Disable</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Disable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2a]">LPS22HB_T_Sensor_Enable</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Enable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[30]">LPS22HB_T_Set_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[31]">LPS22HB_T_Set_ODR_Value</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR_Value) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[33]">LPS22HB_T_Write_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Write_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[49]">LPS25HB_P_Check_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Check_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[45]">LPS25HB_P_DeInit</a> from lps25hb_driver_hl.o(i.LPS25HB_P_DeInit) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[50]">LPS25HB_P_Get_DRDY_Status</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_DRDY_Status) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[4b]">LPS25HB_P_Get_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[4a]">LPS25HB_P_Get_Press</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_Press) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[48]">LPS25HB_P_Get_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[44]">LPS25HB_P_Init</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Init) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[4e]">LPS25HB_P_Read_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Read_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[47]">LPS25HB_P_Sensor_Disable</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Disable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[46]">LPS25HB_P_Sensor_Enable</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Enable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[4c]">LPS25HB_P_Set_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[4d]">LPS25HB_P_Set_ODR_Value</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR_Value) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[4f]">LPS25HB_P_Write_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Write_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[56]">LPS25HB_T_Check_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Check_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[52]">LPS25HB_T_DeInit</a> from lps25hb_driver_hl.o(i.LPS25HB_T_DeInit) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5d]">LPS25HB_T_Get_DRDY_Status</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_DRDY_Status) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[58]">LPS25HB_T_Get_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[57]">LPS25HB_T_Get_Temp</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_Temp) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[55]">LPS25HB_T_Get_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[51]">LPS25HB_T_Init</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Init) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5b]">LPS25HB_T_Read_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Read_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[54]">LPS25HB_T_Sensor_Disable</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Disable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[53]">LPS25HB_T_Sensor_Enable</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Enable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[59]">LPS25HB_T_Set_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5a]">LPS25HB_T_Set_ODR_Value</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR_Value) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5c]">LPS25HB_T_Write_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Write_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[71]">LPTIM1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[86]">Lora_OnJoinStatusDelayTimerEvt</a> from lora_driver.o(i.Lora_OnJoinStatusDelayTimerEvt) referenced from lora_driver.o(i.Lora_Join)
 <LI><a href="#[88]">Lora_OnLedTimerEvent</a> from lora_driver.o(i.Lora_OnLedTimerEvent) referenced from lora_driver.o(i.Lora_fsm)
 <LI><a href="#[87]">Lora_OnNextSensorMeasureTimerEvt</a> from lora_driver.o(i.Lora_OnNextSensorMeasureTimerEvt) referenced from lora_driver.o(i.Lora_fsm)
 <LI><a href="#[5f]">NMI_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[65]">PVD_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[62]">PendSV_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[68]">RCC_CRS_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[7c]">RNG_LPUART1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[66]">RTC_IRQHandler</a> from stm32l0xx_it.o(i.RTC_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[5e]">Reset_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[78]">SPI1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[79]">SPI2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[61]">SVC_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[0]">SensorMeasureData</a> from main.o(i.SensorMeasureData) referenced 2 times from main.o(.data)
 <LI><a href="#[63]">SysTick_Handler</a> from stm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[80]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l053xx.o(.text)
 <LI><a href="#[74]">TIM21_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[75]">TIM22_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[72]">TIM2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[73]">TIM6_DAC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[6c]">TSC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[7a]">USART1_IRQHandler</a> from stm32l0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[7b]">USART2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[7e]">USB_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[64]">WWDG_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[81]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l053xx.o(.text)
 <LI><a href="#[83]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[84]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[82]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[8a]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[8b]">atctl_at</a> from lrwan_ns1_atcmd.o(i.atctl_at) referenced from lrwan_ns1_atcmd.o(.constdata)
 <LI><a href="#[93]">atctl_delay</a> from lrwan_ns1_atcmd.o(i.atctl_delay) referenced 4 times from lrwan_ns1_atcmd.o(.constdata)
 <LI><a href="#[8f]">atctl_dr</a> from lrwan_ns1_atcmd.o(i.atctl_dr) referenced from lrwan_ns1_atcmd.o(.constdata)
 <LI><a href="#[8d]">atctl_id</a> from lrwan_ns1_atcmd.o(i.atctl_id) referenced 3 times from lrwan_ns1_atcmd.o(.constdata)
 <LI><a href="#[92]">atctl_join</a> from lrwan_ns1_atcmd.o(i.atctl_join) referenced from lrwan_ns1_atcmd.o(.constdata)
 <LI><a href="#[90]">atctl_lw</a> from lrwan_ns1_atcmd.o(i.atctl_lw) referenced from lrwan_ns1_atcmd.o(.constdata)
 <LI><a href="#[91]">atctl_mode</a> from lrwan_ns1_atcmd.o(i.atctl_mode) referenced from lrwan_ns1_atcmd.o(.constdata)
 <LI><a href="#[8e]">atctl_msg</a> from lrwan_ns1_atcmd.o(i.atctl_msg) referenced 4 times from lrwan_ns1_atcmd.o(.constdata)
 <LI><a href="#[94]">atctl_vdd</a> from lrwan_ns1_atcmd.o(i.atctl_vdd) referenced from lrwan_ns1_atcmd.o(.constdata)
 <LI><a href="#[8c]">atctl_ver</a> from lrwan_ns1_atcmd.o(i.atctl_ver) referenced from lrwan_ns1_atcmd.o(.constdata)
 <LI><a href="#[89]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[85]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[7f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[81]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(.text)
</UL>
<P><STRONG><a name="[1df]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[95]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ba]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1e0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1e1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1e2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1e3]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1e4]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[5e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1e5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_number
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMeasureData
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Temperature
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[1e8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive_evt
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_TEMPERATURE_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_PRESSURE_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMeasureData
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_dr
</UL>

<P><STRONG><a name="[1eb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1bf]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_parse
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_msg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_mode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_join
</UL>

<P><STRONG><a name="[1da]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_mode
</UL>

<P><STRONG><a name="[9f]"></a>strncasecmp</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_parse
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_msg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_join
</UL>

<P><STRONG><a name="[a1]"></a>__0sscanf</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_ver
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_vdd
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_parse
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_msg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_mode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_lw
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_join
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_id
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_dr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_delay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_at
</UL>

<P><STRONG><a name="[a3]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[be]"></a>_scanf_string</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMeasureData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMeasureData
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_Temp
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_Hum
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_Temp
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_Press
</UL>

<P><STRONG><a name="[1c3]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMeasureData
</UL>

<P><STRONG><a name="[1ec]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_vdd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GetBatLevel
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GetBatLevel
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GetBatLevel
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_vdd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_Temp
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_Temp
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_Press
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_vdd
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_Hum
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMeasureData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMeasureData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GetBatLevel
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMeasureData
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GetBatLevel
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_vdd
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_vdd
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ed]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ee]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ef]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[a4]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[a2]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[82]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[1f0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[a6]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[ae]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ad]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1d1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[96]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1f1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>isspace</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, isspace_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>__vfscanf</STRONG> (Thumb, 812 bytes, Stack size 80 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real (Weak Reference)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[1f3]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__ctype_lookup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[1f4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>BSP_HUMIDITY_Get_Hum</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lrwan_ns1_humidity.o(i.BSP_HUMIDITY_Get_Hum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Get_Hum
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[c2]"></a>BSP_HUMIDITY_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lrwan_ns1_humidity.o(i.BSP_HUMIDITY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_HUMIDITY_Init &rArr; BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[d5]"></a>BSP_HUMIDITY_Sensor_Enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lrwan_ns1_humidity.o(i.BSP_HUMIDITY_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[c3]"></a>BSP_LED_DeInit</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, stm32l0xx_nucleo.o(i.BSP_LED_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BSP_LED_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[c6]"></a>BSP_LED_Init</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, stm32l0xx_nucleo.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitStopMode
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Ctx_Init
</UL>

<P><STRONG><a name="[c8]"></a>BSP_LED_Off</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l0xx_nucleo.o(i.BSP_LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_OnLedTimerEvent
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Join
</UL>

<P><STRONG><a name="[c9]"></a>BSP_LED_On</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l0xx_nucleo.o(i.BSP_LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
</UL>

<P><STRONG><a name="[cf]"></a>BSP_PB_Init</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32l0xx_nucleo.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[db]"></a>BSP_PRESSURE_Get_Press</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lrwan_ns1_pressure.o(i.BSP_PRESSURE_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_Get_Press
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[d2]"></a>BSP_PRESSURE_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lrwan_ns1_pressure.o(i.BSP_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_PRESSURE_Init &rArr; BSP_LPS25HB_PRESSURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_PRESSURE_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[d7]"></a>BSP_PRESSURE_Sensor_Enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lrwan_ns1_pressure.o(i.BSP_PRESSURE_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[da]"></a>BSP_TEMPERATURE_Get_Temp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lrwan_ns1_temperature.o(i.BSP_TEMPERATURE_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Get_Temp
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[d3]"></a>BSP_TEMPERATURE_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lrwan_ns1_temperature.o(i.BSP_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_TEMPERATURE_Init &rArr; BSP_LPS25HB_TEMPERATURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_TEMPERATURE_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[d6]"></a>BSP_TEMPERATURE_Sensor_Enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lrwan_ns1_temperature.o(i.BSP_TEMPERATURE_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[d4]"></a>BSP_sensor_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp.o(i.BSP_sensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSP_sensor_Init &rArr; BSP_TEMPERATURE_Init &rArr; BSP_LPS25HB_TEMPERATURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Sensor_Enable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Sensor_Enable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Sensor_Enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitStopMode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[d8]"></a>BSP_sensor_Read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp.o(i.BSP_sensor_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_sensor_Read &rArr; BSP_TEMPERATURE_Get_Temp
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Get_Temp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Get_Press
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Get_Hum
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMeasureData
</UL>

<P><STRONG><a name="[dc]"></a>DBG_Init</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, debug.o(i.DBG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DBG_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGStopMode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGStandbyMode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGSleepMode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; Modem_IO_Init &rArr; HW_UART_Modem_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>Error_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, debug.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Error_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Modem_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[de]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_DBGMCU_EnableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_DBGMCU_EnableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_DBGMCU_EnableDBGStandbyMode))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[df]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_DBGMCU_EnableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_DeInit
</UL>

<P><STRONG><a name="[e4]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; Modem_IO_Init &rArr; HW_UART_Modem_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_IO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_IO_DeInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; Modem_IO_Init &rArr; HW_UART_Modem_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_GPIO_Init</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GpioInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
</UL>

<P><STRONG><a name="[13c]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Read
</UL>

<P><STRONG><a name="[c4]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_DeInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>

<P><STRONG><a name="[ee]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[e9]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>

<P><STRONG><a name="[154]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>

<P><STRONG><a name="[eb]"></a>HAL_I2C_Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>

<P><STRONG><a name="[ed]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>

<P><STRONG><a name="[f3]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>

<P><STRONG><a name="[ea]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[ec]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f8]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisablePVD
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUltraLowPower
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableFastWakeUp
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[11d]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[d1]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
</UL>

<P><STRONG><a name="[d0]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
</UL>

<P><STRONG><a name="[fc]"></a>HAL_PWREx_DisableFastWakeUp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_DisableFastWakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[fb]"></a>HAL_PWREx_EnableUltraLowPower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_EnableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[fa]"></a>HAL_PWR_DisablePVD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_DisablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[15f]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterSleepMode
</UL>

<P><STRONG><a name="[160]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
</UL>

<P><STRONG><a name="[fe]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[102]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[103]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c7]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[101]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ff]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[100]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[104]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1106 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[14a]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTCEx_EnableBypassShadow
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[106]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>

<P><STRONG><a name="[108]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[109]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[10b]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[10c]"></a>HAL_RTC_Init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[10d]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 94 bytes, Stack size 96 bytes, stm32l0xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[10f]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[111]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[113]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[112]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[115]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[114]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[116]"></a>HAL_UART_DeInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
</UL>

<P><STRONG><a name="[118]"></a>HAL_UART_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Modem_Init
</UL>

<P><STRONG><a name="[117]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, hw_usart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_IO_DeInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[119]"></a>HAL_UART_MspInit</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, hw_usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive_evt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive
</UL>

<P><STRONG><a name="[11e]"></a>HAL_UART_Transmit</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send
</UL>

<P><STRONG><a name="[120]"></a>HTS221_Activate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Activate &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Enable
</UL>

<P><STRONG><a name="[125]"></a>HTS221_DeActivate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_DeActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_DeActivate &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Disable
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[126]"></a>HTS221_Get_DataStatus</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_DRDY_Status
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_DRDY_Status
</UL>

<P><STRONG><a name="[127]"></a>HTS221_Get_DeviceID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>

<P><STRONG><a name="[128]"></a>HTS221_Get_Humidity</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, hts221_driver.o(i.HTS221_Get_Humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_Get_Humidity &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_Hum
</UL>

<P><STRONG><a name="[12c]"></a>HTS221_Get_Odr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_ODR
</UL>

<P><STRONG><a name="[12d]"></a>HTS221_Get_Temperature</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, hts221_driver.o(i.HTS221_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_Get_Temperature &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_Temp
</UL>

<P><STRONG><a name="[121]"></a>HTS221_ReadReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Odr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Read_Reg
</UL>

<P><STRONG><a name="[136]"></a>HTS221_Set_BduMode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Set_BduMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Set_BduMode &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[13a]"></a>HTS221_Set_Odr</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Set_Odr &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR_Value
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>

<P><STRONG><a name="[122]"></a>HTS221_WriteReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Write_Reg
</UL>

<P><STRONG><a name="[138]"></a>HTS221_assert_failed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hts221_driver.o(i.HTS221_assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HTS221_assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
</UL>

<P><STRONG><a name="[e6]"></a>HW_GPIO_Read</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hw_gpio.o(i.HW_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_GPIO_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[13d]"></a>HW_GpioInit</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, stm32l0xx_hw.o(i.HW_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_GpioInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitStopMode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>HW_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l0xx_hw.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = HW_Init &rArr; HW_RTC_Init &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_IO_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>HW_RTC_DelayMs</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[1cc]"></a>HW_RTC_GetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_rtc.o(i.HW_RTC_GetMinimumTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[1cb]"></a>HW_RTC_GetTimerContext</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_rtc.o(i.HW_RTC_GetTimerContext))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[142]"></a>HW_RTC_GetTimerElapsedTime</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_GetTimerElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HW_RTC_GetTimerElapsedTime &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[140]"></a>HW_RTC_GetTimerValue</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_GetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[13f]"></a>HW_RTC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = HW_RTC_Init &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[145]"></a>HW_RTC_IrqHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HW_RTC_IrqHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>HW_RTC_SetAlarm</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_GetMode
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[144]"></a>HW_RTC_SetTimerContext</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_SetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HW_RTC_SetTimerContext &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[14c]"></a>HW_RTC_StopAlarm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_StopAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_RTC_StopAlarm &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>

<P><STRONG><a name="[14d]"></a>HW_RTC_Tick2ms</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_Tick2ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_RTC_Tick2ms &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[14f]"></a>HW_RTC_ms2Tick</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_ms2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>

<P><STRONG><a name="[1d7]"></a>HW_UART_Modem_GetNewChar</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hw_usart.o(i.HW_UART_Modem_GetNewChar))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive_evt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive
</UL>

<P><STRONG><a name="[150]"></a>HW_UART_Modem_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, hw_usart.o(i.HW_UART_Modem_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_UART_Modem_IRQHandler &rArr; LPM_SetStopMode
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>HW_UART_Modem_Init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, hw_usart.o(i.HW_UART_Modem_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HW_UART_Modem_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_IO_Init
</UL>

<P><STRONG><a name="[1d6]"></a>HW_UART_Modem_IsNewCharReceived</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hw_usart.o(i.HW_UART_Modem_IsNewCharReceived))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive_evt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive
</UL>

<P><STRONG><a name="[158]"></a>LPM_EnterLowPower</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, low_power_manager.o(i.LPM_EnterLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPM_EnterLowPower &rArr; LPM_ExitStopMode &rArr; Modem_IO_Init &rArr; HW_UART_Modem_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitStopMode
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterSleepMode
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitSleepMode
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitOffMode
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterOffMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>LPM_EnterOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, low_power_manager.o(i.LPM_EnterOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[159]"></a>LPM_EnterSleepMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l0xx_hw.o(i.LPM_EnterSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPM_EnterSleepMode
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[15b]"></a>LPM_EnterStopMode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32l0xx_hw.o(i.LPM_EnterStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LPM_EnterStopMode &rArr; HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_IO_DeInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[15e]"></a>LPM_ExitOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, low_power_manager.o(i.LPM_ExitOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[15a]"></a>LPM_ExitSleepMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, low_power_manager.o(i.LPM_ExitSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[15c]"></a>LPM_ExitStopMode</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l0xx_hw.o(i.LPM_ExitStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPM_ExitStopMode &rArr; Modem_IO_Init &rArr; HW_UART_Modem_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_IO_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GpioInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[148]"></a>LPM_GetMode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, low_power_manager.o(i.LPM_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[1dd]"></a>LPM_SetOffMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, low_power_manager.o(i.LPM_SetOffMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPM_SetOffMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[146]"></a>LPM_SetStopMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, low_power_manager.o(i.LPM_SetStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Modem_IRQHandler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>

<P><STRONG><a name="[16f]"></a>LPS22HB_Get_DataStatus</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_DRDY_Status
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_DRDY_Status
</UL>

<P><STRONG><a name="[171]"></a>LPS22HB_Get_DeviceID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>

<P><STRONG><a name="[166]"></a>LPS22HB_Get_FifoMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Mode
</UL>

<P><STRONG><a name="[165]"></a>LPS22HB_Get_FifoStatus</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Ovr_Status
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Num_Of_Samples
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Full_Status
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Fth_Status
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Empty_Status
</UL>

<P><STRONG><a name="[167]"></a>LPS22HB_Get_FifoWatermarkLevel</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoWatermarkLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_Get_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Watermark_Level
</UL>

<P><STRONG><a name="[173]"></a>LPS22HB_Get_Odr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>

<P><STRONG><a name="[174]"></a>LPS22HB_Get_Pressure</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawPressure
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>

<P><STRONG><a name="[175]"></a>LPS22HB_Get_RawPressure</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_RawPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Pressure
</UL>

<P><STRONG><a name="[176]"></a>LPS22HB_Get_RawTemperature</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_RawTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
</UL>

<P><STRONG><a name="[177]"></a>LPS22HB_Get_Temperature</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawTemperature
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
</UL>

<P><STRONG><a name="[170]"></a>LPS22HB_ReadReg</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, lps22hb_driver.o(i.LPS22HB_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawTemperature
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawPressure
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Odr
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoWatermarkLevel
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoMode
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
</UL>

<P><STRONG><a name="[cb]"></a>LPS22HB_Sensor_IO_ITConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lrwan_ns1.o(i.LPS22HB_Sensor_IO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>

<P><STRONG><a name="[17e]"></a>LPS22HB_Set_AutomaticIncrementRegAddress</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_AutomaticIncrementRegAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_AutomaticIncrementRegAddress &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[17d]"></a>LPS22HB_Set_Bdu</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_Bdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_Bdu &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[168]"></a>LPS22HB_Set_FIFO_FTH_Interrupt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_FTH_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_FIFO_FTH_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[169]"></a>LPS22HB_Set_FIFO_FULL_Interrupt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_FULL_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_FIFO_FULL_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[16a]"></a>LPS22HB_Set_FIFO_OVR_Interrupt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_OVR_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[16b]"></a>LPS22HB_Set_FifoMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Mode
</UL>

<P><STRONG><a name="[16e]"></a>LPS22HB_Set_FifoModeUse</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoModeUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_FifoModeUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Usage
</UL>

<P><STRONG><a name="[16c]"></a>LPS22HB_Set_FifoWatermarkLevel</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoWatermarkLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Watermark_Level
</UL>

<P><STRONG><a name="[16d]"></a>LPS22HB_Set_FifoWatermarkLevelUse</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoWatermarkLevelUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Watermark_Usage
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Stop_On_Fth
</UL>

<P><STRONG><a name="[17b]"></a>LPS22HB_Set_LowPassFilter</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_LowPassFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_LowPassFilter &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[17c]"></a>LPS22HB_Set_LowPassFilterCutoff</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_LowPassFilterCutoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_LowPassFilterCutoff &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[17a]"></a>LPS22HB_Set_Odr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Disable
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Disable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[179]"></a>LPS22HB_Set_PowerMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_PowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_PowerMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[185]"></a>LPS22HB_WriteReg</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, lps22hb_driver.o(i.LPS22HB_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
</UL>

<P><STRONG><a name="[186]"></a>LPS25HB_Activate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_Activate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Enable
</UL>

<P><STRONG><a name="[18a]"></a>LPS25HB_DeActivate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_DeActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Disable
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[18b]"></a>LPS25HB_Get_DataStatus</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Get_DataStatus &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_DRDY_Status
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_DRDY_Status
</UL>

<P><STRONG><a name="[18d]"></a>LPS25HB_Get_DeviceID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_WhoAmI
</UL>

<P><STRONG><a name="[18f]"></a>LPS25HB_Get_Odr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Get_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_ODR
</UL>

<P><STRONG><a name="[190]"></a>LPS25HB_Get_Pressure</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_Get_Pressure &rArr; LPS25HB_Get_RawPressure &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_RawPressure
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_Press
</UL>

<P><STRONG><a name="[191]"></a>LPS25HB_Get_RawPressure</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_RawPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Get_RawPressure &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Pressure
</UL>

<P><STRONG><a name="[192]"></a>LPS25HB_Get_RawTemperature</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_RawTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Get_RawTemperature &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Temperature
</UL>

<P><STRONG><a name="[193]"></a>LPS25HB_Get_Temperature</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_Get_Temperature &rArr; LPS25HB_Get_RawTemperature &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_RawTemperature
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_Temp
</UL>

<P><STRONG><a name="[18c]"></a>LPS25HB_ReadReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Read_Reg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_RawTemperature
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_RawPressure
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Odr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DeviceID
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DataStatus
</UL>

<P><STRONG><a name="[199]"></a>LPS25HB_Set_Avg</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lps25hb_driver.o(i.LPS25HB_Set_Avg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_Set_Avg &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[197]"></a>LPS25HB_Set_Bdu</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_Bdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Set_Bdu &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[196]"></a>LPS25HB_Set_InterruptCircuitEnable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_InterruptCircuitEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Set_InterruptCircuitEnable &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[1a1]"></a>LPS25HB_Set_Odr</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Set_Odr &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR_Value
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
</UL>

<P><STRONG><a name="[187]"></a>LPS25HB_Set_PowerDownMode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_PowerDownMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Set_PowerDownMode &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_DeActivate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Activate
</UL>

<P><STRONG><a name="[198]"></a>LPS25HB_Set_SpiInterface</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_SpiInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Set_SpiInterface &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[1a0]"></a>LPS25HB_WriteReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Write_Reg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
</UL>

<P><STRONG><a name="[19f]"></a>LPS25HB_assert_failed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lps25hb_driver.o(i.LPS25HB_assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPS25HB_assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
</UL>

<P><STRONG><a name="[1a2]"></a>LoRa_GetAppID</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lora_driver.o(i.LoRa_GetAppID))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LoRa_GetAppID &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
</UL>

<P><STRONG><a name="[1a4]"></a>LoRa_GetDeviceAddress</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lora_driver.o(i.LoRa_GetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = LoRa_GetDeviceAddress &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
</UL>

<P><STRONG><a name="[1a5]"></a>LoRa_GetDeviceID</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lora_driver.o(i.LoRa_GetDeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LoRa_GetDeviceID &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
</UL>

<P><STRONG><a name="[1a6]"></a>LoRa_SetAppID</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_driver.o(i.LoRa_SetAppID))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LoRa_SetAppID &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
</UL>

<P><STRONG><a name="[1a7]"></a>LoRa_SetDeviceID</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_driver.o(i.LoRa_SetDeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LoRa_SetDeviceID &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
</UL>

<P><STRONG><a name="[1a8]"></a>Lora_Ctx_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lora_driver.o(i.Lora_Ctx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Lora_Ctx_Init &rArr; BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>Lora_GetBatLevel</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lora_driver.o(i.Lora_GetBatLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Lora_GetBatLevel &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMeasureData
</UL>

<P><STRONG><a name="[1ab]"></a>Lora_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lora_driver.o(i.Lora_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Lora_Init &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
</UL>

<P><STRONG><a name="[1ac]"></a>Lora_Join</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, lora_driver.o(i.Lora_Join))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Lora_Join &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_rx
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive_evt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
</UL>

<P><STRONG><a name="[1b6]"></a>Lora_SendDataBin</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lora_driver.o(i.Lora_SendDataBin))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Lora_SendDataBin &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Send
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
</UL>

<P><STRONG><a name="[1b7]"></a>Lora_SetAdaptiveDataRate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_driver.o(i.Lora_SetAdaptiveDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Lora_SetAdaptiveDataRate &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
</UL>

<P><STRONG><a name="[1b8]"></a>Lora_SetDefault</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_driver.o(i.Lora_SetDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Lora_SetDefault &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
</UL>

<P><STRONG><a name="[1b9]"></a>Lora_SetDeviceBand</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_driver.o(i.Lora_SetDeviceBand))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Lora_SetDeviceBand &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
</UL>

<P><STRONG><a name="[1ba]"></a>Lora_SetJoinMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_driver.o(i.Lora_SetJoinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Lora_SetJoinMode &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
</UL>

<P><STRONG><a name="[1bb]"></a>Lora_SetWDT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_driver.o(i.Lora_SetWDT))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Lora_SetWDT &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
</UL>

<P><STRONG><a name="[1bc]"></a>Lora_SleepMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_driver.o(i.Lora_SleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Lora_SleepMode &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
</UL>

<P><STRONG><a name="[1bd]"></a>Lora_fsm</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, lora_driver.o(i.Lora_fsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = Lora_fsm &rArr; Lora_Join &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SleepMode
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SetWDT
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SetJoinMode
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SetDeviceBand
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SetDefault
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SetAdaptiveDataRate
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SendDataBin
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Join
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SetDeviceID
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SetAppID
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_GetDeviceID
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_GetDeviceAddress
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_GetAppID
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a3]"></a>Modem_AT_Cmd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lrwan_ns1_atcmd.o(i.Modem_AT_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_reset
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_send
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_format
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SleepMode
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SetWDT
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SetJoinMode
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SetDeviceBand
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SetDefault
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SetAdaptiveDataRate
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SendDataBin
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Join
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GetBatLevel
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SetDeviceID
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SetAppID
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_GetDeviceID
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_GetDeviceAddress
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_GetAppID
</UL>

<P><STRONG><a name="[e7]"></a>Modem_IO_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lrwan_ns1_atcmd.o(i.Modem_IO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Modem_IO_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[e8]"></a>Modem_IO_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lrwan_ns1_atcmd.o(i.Modem_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Modem_IO_Init &rArr; HW_UART_Modem_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Modem_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitStopMode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[10a]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[110]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[10e]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[66]"></a>RTC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = RTC_IRQHandler &rArr; HW_RTC_IrqHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>Sensor_IO_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lrwan_ns1.o(i.Sensor_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_TEMPERATURE_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_PRESSURE_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
</UL>

<P><STRONG><a name="[137]"></a>Sensor_IO_Read</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lrwan_ns1.o(i.Sensor_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>

<P><STRONG><a name="[13b]"></a>Sensor_IO_Write</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lrwan_ns1.o(i.Sensor_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
</UL>

<P><STRONG><a name="[63]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1c6]"></a>SystemClock_Config</STRONG> (Thumb, 184 bytes, Stack size 128 bytes, stm32l0xx_hw.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(.text)
</UL>
<P><STRONG><a name="[1ad]"></a>TimerGetCurrentTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timeserver.o(i.TimerGetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = TimerGetCurrentTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Send
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive_evt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Join
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive
</UL>

<P><STRONG><a name="[1af]"></a>TimerGetElapsedTime</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, timeserver.o(i.TimerGetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Send
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive_evt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Join
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive
</UL>

<P><STRONG><a name="[1b1]"></a>TimerInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timeserver.o(i.TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Join
</UL>

<P><STRONG><a name="[107]"></a>TimerIrqHandler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, timeserver.o(i.TimerIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerContext
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[1b2]"></a>TimerSetValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timeserver.o(i.TimerSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Join
</UL>

<P><STRONG><a name="[1b3]"></a>TimerStart</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, timeserver.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Join
</UL>

<P><STRONG><a name="[1b4]"></a>TimerStop</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, timeserver.o(i.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_OnNextSensorMeasureTimerEvt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_OnJoinStatusDelayTimerEvt
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>

<P><STRONG><a name="[11a]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11c]"></a>UART_CheckIdleState</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11b]"></a>UART_SetConfig</STRONG> (Thumb, 498 bytes, Stack size 32 bytes, stm32l0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11f]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[7a]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; HW_UART_Modem_IRQHandler &rArr; LPM_SetStopMode
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Modem_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1cd]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f6]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[e3]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMeasureData
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_format
</UL>

<P><STRONG><a name="[1f7]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1f8]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1cf]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f9]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1c4]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMeasureData
</UL>

<P><STRONG><a name="[1fa]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1fb]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[b8]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[14e]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hw_rtc.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
</UL>

<P><STRONG><a name="[139]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tiny_sscanf.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Disabled
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_format
</UL>

<P><STRONG><a name="[1fc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1fd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1fe]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c0]"></a>at_cmd_receive</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, lrwan_ns1_atcmd.o(i.at_cmd_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Modem_IsNewCharReceived
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Modem_GetNewChar
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_rx
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_rx_byte
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>

<P><STRONG><a name="[1ae]"></a>at_cmd_receive_evt</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lrwan_ns1_atcmd.o(i.at_cmd_receive_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = at_cmd_receive_evt &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Modem_IsNewCharReceived
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Modem_GetNewChar
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_rx_byte
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Send
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Join
</UL>

<P><STRONG><a name="[1d4]"></a>at_cmd_vprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lrwan_ns1_atcmd.o(i.at_cmd_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = at_cmd_vprintf &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_format
</UL>

<P><STRONG><a name="[1b0]"></a>atctl_rx</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, lrwan_ns1_atcmd.o(i.atctl_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_rx_byte
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Send
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Join
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive
</UL>

<P><STRONG><a name="[89]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[1de]"></a>lora_getDeviceState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora_driver.o(i.lora_getDeviceState))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>main</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = main &rArr; Lora_fsm &rArr; Lora_Join &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Modem_IsNewCharReceived
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GpioInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetOffMode
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_getDeviceState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_fsm
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Ctx_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1d9]"></a>tiny_vsnprintf_like</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, tiny_vsnprintf.o(i.tiny_vsnprintf_like))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_number
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_vprintf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[141]"></a>HW_RTC_GetCalendarValue</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, hw_rtc.o(i.HW_RTC_GetCalendarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[143]"></a>HW_RTC_SetConfig</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[149]"></a>HW_RTC_StartWakeUpAlarm</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, hw_rtc.o(i.HW_RTC_StartWakeUpAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HW_RTC_StartWakeUpAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[86]"></a>Lora_OnJoinStatusDelayTimerEvt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lora_driver.o(i.Lora_OnJoinStatusDelayTimerEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Lora_OnJoinStatusDelayTimerEvt &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_driver.o(i.Lora_Join)
</UL>
<P><STRONG><a name="[88]"></a>Lora_OnLedTimerEvent</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lora_driver.o(i.Lora_OnLedTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Lora_OnLedTimerEvent &rArr; BSP_LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_driver.o(i.Lora_fsm)
</UL>
<P><STRONG><a name="[87]"></a>Lora_OnNextSensorMeasureTimerEvt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lora_driver.o(i.Lora_OnNextSensorMeasureTimerEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Lora_OnNextSensorMeasureTimerEvt &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_driver.o(i.Lora_fsm)
</UL>
<P><STRONG><a name="[1b5]"></a>Lora_Send</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, lora_driver.o(i.Lora_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Lora_Send &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_rx
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive_evt
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SendDataBin
</UL>

<P><STRONG><a name="[0]"></a>SensorMeasureData</STRONG> (Thumb, 278 bytes, Stack size 168 bytes, main.o(i.SensorMeasureData))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = SensorMeasureData &rArr; Lora_GetBatLevel &rArr; Modem_AT_Cmd &rArr; at_cmd_receive &rArr; atctl_rx &rArr; atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GetBatLevel
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1dc]"></a>ee_number</STRONG> (Thumb, 254 bytes, Stack size 120 bytes, tiny_vsnprintf.o(i.ee_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
</UL>

<P><STRONG><a name="[123]"></a>HTS221_Check_WhoAmI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Check_WhoAmI
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Check_WhoAmI
</UL>

<P><STRONG><a name="[12b]"></a>HTS221_Get_ODR</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_ODR
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_ODR
</UL>

<P><STRONG><a name="[124]"></a>HTS221_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_WhoAmI
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_WhoAmI
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>

<P><STRONG><a name="[6]"></a>HTS221_H_Check_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_H_Check_WhoAmI &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>HTS221_H_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_H_DeInit &rArr; HTS221_H_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>HTS221_H_Get_DRDY_Status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_H_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Get_DRDY_Status &rArr; HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>HTS221_H_Get_Hum</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_H_Get_Hum))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_H_Get_Hum &rArr; HTS221_Get_Humidity &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>HTS221_H_Get_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_H_Get_ODR &rArr; HTS221_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>HTS221_H_Get_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_H_Get_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>HTS221_H_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_H_Init &rArr; HTS221_Init &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>HTS221_H_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_H_Read_Reg &rArr; HTS221_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>HTS221_H_Sensor_Disable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>HTS221_H_Sensor_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Sensor_Enable &rArr; HTS221_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>HTS221_H_Set_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Set_ODR &rArr; HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>HTS221_H_Set_ODR_Value</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Set_ODR_Value &rArr; HTS221_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>HTS221_H_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_H_Write_Reg &rArr; HTS221_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12f]"></a>HTS221_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_Init &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Init
</UL>

<P><STRONG><a name="[130]"></a>HTS221_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Read_Reg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Read_Reg
</UL>

<P><STRONG><a name="[131]"></a>HTS221_Sensor_Disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Disable
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Disable
</UL>

<P><STRONG><a name="[132]"></a>HTS221_Sensor_Enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Enable
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Enable
</UL>

<P><STRONG><a name="[133]"></a>HTS221_Set_ODR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Set_ODR
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Set_ODR
</UL>

<P><STRONG><a name="[134]"></a>HTS221_Set_ODR_Value</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Set_ODR_Value
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Set_ODR_Value
</UL>

<P><STRONG><a name="[13]"></a>HTS221_T_Check_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_T_Check_WhoAmI &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>HTS221_T_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_T_DeInit &rArr; HTS221_T_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>HTS221_T_Get_DRDY_Status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Get_DRDY_Status &rArr; HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>HTS221_T_Get_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_T_Get_ODR &rArr; HTS221_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>HTS221_T_Get_Temp</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_T_Get_Temp &rArr; HTS221_Get_Temperature &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>HTS221_T_Get_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_T_Get_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>HTS221_T_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_T_Init &rArr; HTS221_Init &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>HTS221_T_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_T_Read_Reg &rArr; HTS221_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>HTS221_T_Sensor_Disable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>HTS221_T_Sensor_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Sensor_Enable &rArr; HTS221_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>HTS221_T_Set_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Set_ODR &rArr; HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>HTS221_T_Set_ODR_Value</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Set_ODR_Value &rArr; HTS221_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>HTS221_T_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_T_Write_Reg &rArr; HTS221_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[135]"></a>HTS221_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Write_Reg
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Write_Reg
</UL>

<P><STRONG><a name="[161]"></a>LPS22HB_Check_WhoAmI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Check_WhoAmI
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Check_WhoAmI
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[3c]"></a>LPS22HB_FIFO_Get_Data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LPS22HB_FIFO_Get_Data &rArr; LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>LPS22HB_FIFO_Get_Empty_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Empty_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Get_Empty_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>LPS22HB_FIFO_Get_Fth_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Fth_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Get_Fth_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>LPS22HB_FIFO_Get_Full_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Full_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Get_Full_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>LPS22HB_FIFO_Get_Mode</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Get_Mode &rArr; LPS22HB_Get_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>LPS22HB_FIFO_Get_Num_Of_Samples</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Num_Of_Samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Get_Num_Of_Samples &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>LPS22HB_FIFO_Get_Ovr_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Ovr_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Get_Ovr_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>LPS22HB_FIFO_Get_Watermark_Level</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_FIFO_Get_Watermark_Level &rArr; LPS22HB_Get_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoWatermarkLevel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>LPS22HB_FIFO_Reset_Interrupt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Reset_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_FIFO_Reset_Interrupt &rArr; LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>LPS22HB_FIFO_Set_Interrupt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_FIFO_Set_Interrupt &rArr; LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>LPS22HB_FIFO_Set_Mode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_FIFO_Set_Mode &rArr; LPS22HB_Set_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>LPS22HB_FIFO_Set_Watermark_Level</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_FIFO_Set_Watermark_Level &rArr; LPS22HB_Set_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>LPS22HB_FIFO_Stop_On_Fth</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Stop_On_Fth))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_FIFO_Stop_On_Fth &rArr; LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>LPS22HB_FIFO_Usage</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_FIFO_Usage &rArr; LPS22HB_Set_FifoModeUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>LPS22HB_FIFO_Watermark_Usage</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Watermark_Usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_FIFO_Watermark_Usage &rArr; LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[172]"></a>LPS22HB_Get_ODR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_ODR
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_ODR
</UL>

<P><STRONG><a name="[163]"></a>LPS22HB_Get_Press</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_Get_Press &rArr; LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Pressure
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_Press
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Data
</UL>

<P><STRONG><a name="[164]"></a>LPS22HB_Get_Temp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_Temp
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Data
</UL>

<P><STRONG><a name="[162]"></a>LPS22HB_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_WhoAmI
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_WhoAmI
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>

<P><STRONG><a name="[178]"></a>LPS22HB_Initialize</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Init
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Init
</UL>

<P><STRONG><a name="[20]"></a>LPS22HB_P_Check_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_P_Check_WhoAmI &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>LPS22HB_P_DeInit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_P_DeInit &rArr; LPS22HB_P_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>LPS22HB_P_Get_DRDY_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_P_Get_DRDY_Status &rArr; LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>LPS22HB_P_Get_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_P_Get_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>LPS22HB_P_Get_Press</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_P_Get_Press &rArr; LPS22HB_Get_Press &rArr; LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>LPS22HB_P_Get_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_P_Get_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>LPS22HB_P_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LPS22HB_P_Init &rArr; LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>LPS22HB_P_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_P_Read_Reg &rArr; LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>LPS22HB_P_Sensor_Disable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_P_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>LPS22HB_P_Sensor_Enable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LPS22HB_P_Sensor_Enable &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>LPS22HB_P_Set_ODR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_P_Set_ODR &rArr; LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>LPS22HB_P_Set_ODR_Value</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_P_Set_ODR_Value &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>LPS22HB_P_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_P_Write_Reg &rArr; LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17f]"></a>LPS22HB_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Read_Reg
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Read_Reg
</UL>

<P><STRONG><a name="[183]"></a>LPS22HB_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR_Value
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR_Value
</UL>

<P><STRONG><a name="[180]"></a>LPS22HB_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR_Value
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Enable
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR_Value
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Enable
</UL>

<P><STRONG><a name="[181]"></a>LPS22HB_Set_ODR_When_Disabled</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_When_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LPS22HB_Set_ODR_When_Disabled &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR
</UL>

<P><STRONG><a name="[182]"></a>LPS22HB_Set_ODR_When_Enabled</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR
</UL>

<P><STRONG><a name="[2d]"></a>LPS22HB_T_Check_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_T_Check_WhoAmI &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>LPS22HB_T_DeInit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_T_DeInit &rArr; LPS22HB_T_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>LPS22HB_T_Get_DRDY_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_T_Get_DRDY_Status &rArr; LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>LPS22HB_T_Get_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_T_Get_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>LPS22HB_T_Get_Temp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_T_Get_Temp &rArr; LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>LPS22HB_T_Get_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_T_Get_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>LPS22HB_T_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LPS22HB_T_Init &rArr; LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>LPS22HB_T_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_T_Read_Reg &rArr; LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>LPS22HB_T_Sensor_Disable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_T_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>LPS22HB_T_Sensor_Enable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LPS22HB_T_Sensor_Enable &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>LPS22HB_T_Set_ODR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_T_Set_ODR &rArr; LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>LPS22HB_T_Set_ODR_Value</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_T_Set_ODR_Value &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>LPS22HB_T_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_T_Write_Reg &rArr; LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[184]"></a>LPS22HB_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Write_Reg
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Write_Reg
</UL>

<P><STRONG><a name="[188]"></a>LPS25HB_Check_WhoAmI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Check_WhoAmI
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Check_WhoAmI
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[18e]"></a>LPS25HB_Get_ODR</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_Get_ODR &rArr; LPS25HB_Get_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_ODR
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_ODR
</UL>

<P><STRONG><a name="[189]"></a>LPS25HB_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_WhoAmI
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_WhoAmI
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Check_WhoAmI
</UL>

<P><STRONG><a name="[194]"></a>LPS25HB_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_Init &rArr; LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Check_WhoAmI
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_DeActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Init
</UL>

<P><STRONG><a name="[49]"></a>LPS25HB_P_Check_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_P_Check_WhoAmI &rArr; LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>LPS25HB_P_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_P_DeInit &rArr; LPS25HB_P_Sensor_Disable &rArr; LPS25HB_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>LPS25HB_P_Get_DRDY_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_P_Get_DRDY_Status &rArr; LPS25HB_Get_DataStatus &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>LPS25HB_P_Get_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_P_Get_ODR &rArr; LPS25HB_Get_ODR &rArr; LPS25HB_Get_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>LPS25HB_P_Get_Press</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_P_Get_Press &rArr; LPS25HB_Get_Pressure &rArr; LPS25HB_Get_RawPressure &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Pressure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>LPS25HB_P_Get_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_P_Get_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>LPS25HB_P_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_P_Init &rArr; LPS25HB_Init &rArr; LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>LPS25HB_P_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_P_Read_Reg &rArr; LPS25HB_Read_Reg &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>LPS25HB_P_Sensor_Disable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_P_Sensor_Disable &rArr; LPS25HB_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>LPS25HB_P_Sensor_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_P_Sensor_Enable &rArr; LPS25HB_Sensor_Enable &rArr; LPS25HB_Activate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>LPS25HB_P_Set_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_P_Set_ODR &rArr; LPS25HB_Set_ODR &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>LPS25HB_P_Set_ODR_Value</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_P_Set_ODR_Value &rArr; LPS25HB_Set_ODR_Value &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>LPS25HB_P_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_P_Write_Reg &rArr; LPS25HB_Write_Reg &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[19a]"></a>LPS25HB_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS25HB_Read_Reg &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Read_Reg
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Read_Reg
</UL>

<P><STRONG><a name="[19b]"></a>LPS25HB_Sensor_Disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_DeActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Sensor_Disable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Sensor_Disable
</UL>

<P><STRONG><a name="[19c]"></a>LPS25HB_Sensor_Enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_Sensor_Enable &rArr; LPS25HB_Activate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Sensor_Enable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Sensor_Enable
</UL>

<P><STRONG><a name="[195]"></a>LPS25HB_Set_ODR</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_Set_ODR &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Set_ODR
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Set_ODR
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[19d]"></a>LPS25HB_Set_ODR_Value</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_Set_ODR_Value &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Set_ODR_Value
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Set_ODR_Value
</UL>

<P><STRONG><a name="[56]"></a>LPS25HB_T_Check_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_T_Check_WhoAmI &rArr; LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>LPS25HB_T_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_T_DeInit &rArr; LPS25HB_T_Sensor_Disable &rArr; LPS25HB_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>LPS25HB_T_Get_DRDY_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_T_Get_DRDY_Status &rArr; LPS25HB_Get_DataStatus &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>LPS25HB_T_Get_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_T_Get_ODR &rArr; LPS25HB_Get_ODR &rArr; LPS25HB_Get_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>LPS25HB_T_Get_Temp</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_T_Get_Temp &rArr; LPS25HB_Get_Temperature &rArr; LPS25HB_Get_RawTemperature &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Temperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>LPS25HB_T_Get_WhoAmI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_T_Get_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>LPS25HB_T_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_T_Init &rArr; LPS25HB_Init &rArr; LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>LPS25HB_T_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_T_Read_Reg &rArr; LPS25HB_Read_Reg &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>LPS25HB_T_Sensor_Disable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_T_Sensor_Disable &rArr; LPS25HB_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>LPS25HB_T_Sensor_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_T_Sensor_Enable &rArr; LPS25HB_Sensor_Enable &rArr; LPS25HB_Activate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>LPS25HB_T_Set_ODR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_T_Set_ODR &rArr; LPS25HB_Set_ODR &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>LPS25HB_T_Set_ODR_Value</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_T_Set_ODR_Value &rArr; LPS25HB_Set_ODR_Value &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>LPS25HB_T_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_T_Write_Reg &rArr; LPS25HB_Write_Reg &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[19e]"></a>LPS25HB_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Write_Reg &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Write_Reg
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Write_Reg
</UL>

<P><STRONG><a name="[105]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l0xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[157]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[156]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, stm32l0xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[f0]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[f4]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[f1]"></a>I2C_TransferConfig</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[ef]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[f2]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[f5]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[fd]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1c9]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timeserver.o(i.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[1ca]"></a>TimerSetTimeout</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timeserver.o(i.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>

<P><STRONG><a name="[152]"></a>I2C_EXPBD_Error</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lrwan_ns1.o(i.I2C_EXPBD_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_EXPBD_Error &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>

<P><STRONG><a name="[153]"></a>I2C_EXPBD_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lrwan_ns1.o(i.I2C_EXPBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>

<P><STRONG><a name="[155]"></a>I2C_EXPBD_MspInit</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, lrwan_ns1.o(i.I2C_EXPBD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>

<P><STRONG><a name="[1c1]"></a>at_cmd_format</STRONG> (Thumb, 740 bytes, Stack size 88 bytes, lrwan_ns1_atcmd.o(i.at_cmd_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = at_cmd_format &rArr; at_cmd_vprintf &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_vprintf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>

<P><STRONG><a name="[1c2]"></a>at_cmd_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lrwan_ns1_atcmd.o(i.at_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_cmd_send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
</UL>

<P><STRONG><a name="[8b]"></a>atctl_at</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lrwan_ns1_atcmd.o(i.atctl_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = atctl_at &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lrwan_ns1_atcmd.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>atctl_delay</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lrwan_ns1_atcmd.o(i.atctl_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = atctl_delay &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lrwan_ns1_atcmd.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>atctl_dr</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lrwan_ns1_atcmd.o(i.atctl_dr))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = atctl_dr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lrwan_ns1_atcmd.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>atctl_id</STRONG> (Thumb, 164 bytes, Stack size 104 bytes, lrwan_ns1_atcmd.o(i.atctl_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = atctl_id &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lrwan_ns1_atcmd.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>atctl_join</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, lrwan_ns1_atcmd.o(i.atctl_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = atctl_join &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lrwan_ns1_atcmd.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>atctl_lw</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lrwan_ns1_atcmd.o(i.atctl_lw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = atctl_lw &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lrwan_ns1_atcmd.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>atctl_mode</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, lrwan_ns1_atcmd.o(i.atctl_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = atctl_mode &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lrwan_ns1_atcmd.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>atctl_msg</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, lrwan_ns1_atcmd.o(i.atctl_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = atctl_msg &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lrwan_ns1_atcmd.o(.constdata)
</UL>
<P><STRONG><a name="[1db]"></a>atctl_parse</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, lrwan_ns1_atcmd.o(i.atctl_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = atctl_parse &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_rx
</UL>

<P><STRONG><a name="[1be]"></a>atctl_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lrwan_ns1_atcmd.o(i.atctl_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_AT_Cmd
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_rx_byte
</UL>

<P><STRONG><a name="[1d8]"></a>atctl_rx_byte</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, lrwan_ns1_atcmd.o(i.atctl_rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atctl_rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atctl_rx
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive_evt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_receive
</UL>

<P><STRONG><a name="[94]"></a>atctl_vdd</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lrwan_ns1_atcmd.o(i.atctl_vdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = atctl_vdd &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lrwan_ns1_atcmd.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>atctl_ver</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lrwan_ns1_atcmd.o(i.atctl_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = atctl_ver &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lrwan_ns1_atcmd.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>BSP_HTS221_HUMIDITY_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lrwan_ns1_humidity.o(i.BSP_HTS221_HUMIDITY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Init
</UL>

<P><STRONG><a name="[ca]"></a>BSP_LPS22HB_PRESSURE_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lrwan_ns1_pressure.o(i.BSP_LPS22HB_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_LPS22HB_PRESSURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init
</UL>

<P><STRONG><a name="[cd]"></a>BSP_LPS25HB_PRESSURE_Init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lrwan_ns1_pressure.o(i.BSP_LPS25HB_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_LPS25HB_PRESSURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init
</UL>

<P><STRONG><a name="[c1]"></a>BSP_HTS221_TEMPERATURE_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lrwan_ns1_temperature.o(i.BSP_HTS221_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_HTS221_TEMPERATURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init
</UL>

<P><STRONG><a name="[cc]"></a>BSP_LPS22HB_TEMPERATURE_Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lrwan_ns1_temperature.o(i.BSP_LPS22HB_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_LPS22HB_TEMPERATURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init
</UL>

<P><STRONG><a name="[ce]"></a>BSP_LPS25HB_TEMPERATURE_Init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lrwan_ns1_temperature.o(i.BSP_LPS25HB_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_LPS25HB_TEMPERATURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init
</UL>

<P><STRONG><a name="[1d0]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ce]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1d3]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d2]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[84]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[bd]"></a>_scanf_longlong</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[bc]"></a>_scanf_real</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<HR></body></html>
